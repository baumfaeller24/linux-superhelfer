{
  "cycle": 253,
  "accuracy": 65.0,
  "cost_score": 37.5,
  "heavy_recall": 57.142857142857146,
  "correct_routes": 13,
  "total_queries": 20,
  "cycle_time": 0.011595240968745202,
  "routing_distribution": {
    "fast": 8,
    "code": 8,
    "heavy": 4
  },
  "category_accuracy": {
    "basic_commands": 66.66666666666666,
    "mathematical": 57.14285714285714,
    "intermediate": 40.0,
    "code_tasks": 100.0
  },
  "results": [
    {
      "query": "Wie kann ich die Festplattenbelegung pr\u00fcfen bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757167532.8036628
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757167532.8036685
    },
    {
      "query": "Berechne die optimale Timeout-Werte f\u00fcr HTTP-Requests",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.30000000000000004,
      "reasoning": "Heavy model selected: heavy_win_balanced H:2.5 T:0.0 (Complexity indicators: berechne, rechne; Scores - Heavy: 2.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\boptimale?\\s+(anzahl|gr\u00f6\u00dfe|batch[-\\s]?gr\u00f6\u00dfe|timeouts?|cache[-\\s]?gr\u00f6\u00dfe|connections?)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 0.0,
          "complexity": 0.30000000000000004
        },
        "route_reason": "heavy_win_balanced H:2.5 T:0.0"
      },
      "timestamp": 1757167532.8036714
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757167532.8036728
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757167532.8036747
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen?",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757167532.8036766
    },
    {
      "query": "Schreibe ein Bash-Skript f\u00fcr System-Updates",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757167532.8036788
    },
    {
      "query": "Vergleiche verschiedene Load-Balancing-Strategien",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.1,
      "reasoning": "Fast model selected: fast_short (Complexity indicators: vergleiche)",
      "debug_info": {
        "route_reason": "fast_short"
      },
      "timestamp": 1757167532.8036802
    },
    {
      "query": "Kannst du mir helfen: erstelle eine python-funktion f\u00fcr datei-synchronisation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: funktion, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757167532.803682
    },
    {
      "query": "Berechne die optimale Anzahl von Connections im Connection Pool?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.2,
      "reasoning": "Heavy model selected: heavy_win_balanced H:3.5 T:0.0 (Complexity indicators: berechne, rechne; Scores - Heavy: 3.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\boptimale?\\s+(anzahl|gr\u00f6\u00dfe|batch[-\\s]?gr\u00f6\u00dfe|timeouts?|cache[-\\s]?gr\u00f6\u00dfe|connections?)\\b",
          "\\b(berechne|bestimme).*\\b(anzahl|gr\u00f6\u00dfe|wert\\w*)\\b.*\\b(connection\\w*|pool|thread\\w*|cache|puffer|buffer)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 3.5,
          "tech": 0.0,
          "complexity": 0.2
        },
        "route_reason": "heavy_win_balanced H:3.5 T:0.0"
      },
      "timestamp": 1757167532.8036842
    },
    {
      "query": "Vergleiche verschiedene Load-Balancing-Strategien",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.1,
      "reasoning": "Fast model selected: fast_short (Complexity indicators: vergleiche)",
      "debug_info": {
        "route_reason": "fast_short"
      },
      "timestamp": 1757167532.8036852
    },
    {
      "query": "Kannst du mir helfen: berechne die optimale timeout-werte f\u00fcr http-requests",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win_balanced H:2.5 T:1.0 (Linux keywords: du; Complexity indicators: berechne, rechne; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\boptimale?\\s+(anzahl|gr\u00f6\u00dfe|batch[-\\s]?gr\u00f6\u00dfe|timeouts?|cache[-\\s]?gr\u00f6\u00dfe|connections?)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win_balanced H:2.5 T:1.0"
      },
      "timestamp": 1757167532.8036869
    },
    {
      "query": "Kannst du mir helfen: was sind best practices f\u00fcr linux-security-hardening?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757167532.8036885
    },
    {
      "query": "Erstelle ein Python-Tool f\u00fcr Netzwerk-Monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757167532.8036902
    },
    {
      "query": "Analysiere die Ursachen f\u00fcr Memory-Leaks in Anwendungen Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.30000000000000004,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.30000000000000004
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757167532.803692
    },
    {
      "query": "Erstelle eine Python-Funktion f\u00fcr Datei-Synchronisation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757167532.8036933
    },
    {
      "query": "Wie kann ich die Festplattenbelegung pr\u00fcfen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757167532.8036945
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757167532.8036962
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757167532.8036973
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win_balanced H:2.5 T:1.0 (Linux keywords: find, cp; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\boptimale?\\s+(anzahl|gr\u00f6\u00dfe|batch[-\\s]?gr\u00f6\u00dfe|timeouts?|cache[-\\s]?gr\u00f6\u00dfe|connections?)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win_balanced H:2.5 T:1.0"
      },
      "timestamp": 1757167532.8036995
    }
  ]
}