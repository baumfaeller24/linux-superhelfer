{
  "cycle": 257,
  "accuracy": 55.0,
  "cost_score": 19.999999999999996,
  "heavy_recall": 0.0,
  "correct_routes": 11,
  "total_queries": 20,
  "cycle_time": 0.011410713195800781,
  "routing_distribution": {
    "fast": 6,
    "code": 14,
    "heavy": 0
  },
  "category_accuracy": {
    "intermediate": 71.42857142857143,
    "code_tasks": 100.0,
    "mathematical": 0.0,
    "basic_commands": 33.33333333333333
  },
  "results": [
    {
      "query": "Wie funktioniert die Speicherverwaltung in Linux?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512553
    },
    {
      "query": "Kannst du mir helfen: erstelle eine python-funktion f\u00fcr datei-synchronisation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: funktion, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.451261
    },
    {
      "query": "Was sind die Vor- und Nachteile von Docker vs. LXC??",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: docker; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512632
    },
    {
      "query": "L\u00f6se die Optimierungsaufgabe f\u00fcr Memory-Allocation?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.6,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cat; Complexity indicators: l\u00f6se; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.6
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512658
    },
    {
      "query": "L\u00f6se die Optimierungsaufgabe f\u00fcr Memory-Allocation",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.6,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cat; Complexity indicators: l\u00f6se; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.6
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512682
    },
    {
      "query": "Kannst du mir helfen: schreibe ein python-skript f\u00fcr performance-monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, rm; Code keywords: python, for; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.45127
    },
    {
      "query": "Was ist der Unterschied zwischen ls und ll??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.1,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.1
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757157711.4512725
    },
    {
      "query": "Kannst du mir helfen: vergleiche verschiedene load-balancing-strategien",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: vergleiche; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.451274
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757157711.4512768
    },
    {
      "query": "Berechne die optimale Timeout-Werte f\u00fcr HTTP-Requests",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.30000000000000004,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: berechne, rechne; Scores - Heavy: 1.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 0.0,
          "complexity": 0.30000000000000004
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757157711.4512792
    },
    {
      "query": "Programmiere einen Service-Monitor in Python Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service; Code keywords: programmiere, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512806
    },
    {
      "query": "Wie kann ich alle laufenden Prozesse anzeigen??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512827
    },
    {
      "query": "Kannst du mir helfen: entwickle ein shell-skript f\u00fcr datenbank-backup",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, du; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512846
    },
    {
      "query": "Erkl\u00e4re die Funktionsweise von systemd Services",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512866
    },
    {
      "query": "Berechne die optimale Anzahl von Connections im Connection Pool Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: berechne, rechne; Scores - Heavy: 1.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 0.0,
          "complexity": 0.2
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757157711.451288
    },
    {
      "query": "Was sind Best Practices f\u00fcr Linux-Security-Hardening?",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757157711.4512906
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757157711.4512928
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512944
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512966
    },
    {
      "query": "Wie funktioniert die Speicherverwaltung in Linux bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757157711.4512978
    }
  ]
}