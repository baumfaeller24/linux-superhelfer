{
  "cycle": 529,
  "accuracy": 46.666666666666664,
  "cost_score": -21.666666666666657,
  "heavy_recall": 33.333333333333336,
  "correct_routes": 14,
  "total_queries": 30,
  "cycle_time": 0.011873142968397588,
  "routing_distribution": {
    "fast": 11,
    "code": 13,
    "heavy": 6
  },
  "category_accuracy": {
    "hard_negative": 0.0,
    "code_tasks": 100.0,
    "mathematical": 75.0,
    "intermediate": 83.33333333333334,
    "basic_commands": 0.0
  },
  "results": [
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1498842
    },
    {
      "query": "Kannst du mir helfen: bestimme die mathematisch beste partitionierung f\u00fcr gro\u00dfe datasets",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.16666666666666666,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.16666666666666666
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.149886
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1498866
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1498876
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.149888
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.149889
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1498895
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1498904
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1498914
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1498919
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499524
    },
    {
      "query": "Kannst du mir helfen: bestimme die mathematisch beste partitionierung f\u00fcr gro\u00dfe datasets",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.16666666666666666,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.16666666666666666
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499548
    },
    {
      "query": "Bestimme die mathematisch optimale Cache-Gr\u00f6\u00dfe f\u00fcr Datenbank-Queries?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win_relaxed H:2.5 T:0.0 (Scores - Heavy: 2.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 0.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win_relaxed H:2.5 T:0.0"
      },
      "timestamp": 1757161544.1499567
    },
    {
      "query": "Bestimme die mathematisch optimale Cache-Gr\u00f6\u00dfe f\u00fcr Datenbank-Queries",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win_relaxed H:2.5 T:0.0 (Scores - Heavy: 2.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 0.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win_relaxed H:2.5 T:0.0"
      },
      "timestamp": 1757161544.1499577
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win_relaxed H:2.5 T:1.0 (Linux keywords: find, cp; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\boptimale?\\s+(anzahl|gr\u00f6\u00dfe|batch[-\\s]?gr\u00f6\u00dfe|timeouts?|cache[-\\s]?gr\u00f6\u00dfe|connections?)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win_relaxed H:2.5 T:1.0"
      },
      "timestamp": 1757161544.149959
    },
    {
      "query": "Erstelle ein Bash-Tool f\u00fcr User-Management",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash, gem; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499605
    },
    {
      "query": "Erstelle eine Python-Funktion f\u00fcr Datei-Synchronisation Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499617
    },
    {
      "query": "Wie optimiere ich die Netzwerk-Performance unter Linux? Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499639
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.149965
    },
    {
      "query": "Kannst du mir helfen: erkl\u00e4re mir die unterschiede zwischen verschiedenen dateisystemen",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.18181818181818182,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.18181818181818182
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499665
    },
    {
      "query": "Was sind Best Practices f\u00fcr Linux-Security-Hardening bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1499684
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161544.1499696
    },
    {
      "query": "Kannst du mir helfen: erkl\u00e4re die funktionsweise von systemd services",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, du, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499708
    },
    {
      "query": "Kannst du mir helfen: wie kann ich die netzwerkverbindungen anzeigen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.149972
    },
    {
      "query": "Finde die mathematisch optimale Batch-Gr\u00f6\u00dfe f\u00fcr Datenverarbeitung?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.7857142857142857,
      "reasoning": "Heavy model selected: heavy_win_relaxed H:2.5 T:1.0 (Linux keywords: find; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.7857142857142857
        },
        "route_reason": "heavy_win_relaxed H:2.5 T:1.0"
      },
      "timestamp": 1757161544.149973
    },
    {
      "query": "Erkl\u00e4re die Funktionsweise von systemd Services Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499743
    },
    {
      "query": "Kannst du mir helfen: l\u00f6se das gleichungssystem: x+y=10, x-y=2",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 1.0,
      "reasoning": "Heavy model selected: heavy_win_relaxed H:3.0 T:1.0 (Linux keywords: du, ss; Complexity indicators: l\u00f6se; Scores - Heavy: 3.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b.{0,40}\\b(gleichung\\w*|system)\\b",
          "\\bgleichungssystem\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 3.0,
          "tech": 1.0,
          "complexity": 1.0
        },
        "route_reason": "heavy_win_relaxed H:3.0 T:1.0"
      },
      "timestamp": 1757161544.1499753
    },
    {
      "query": "Kannst du mir helfen: berechne die optimale timeout-werte f\u00fcr http-requests",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win_relaxed H:2.5 T:1.0 (Linux keywords: du; Complexity indicators: berechne, rechne; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\boptimale?\\s+(anzahl|gr\u00f6\u00dfe|batch[-\\s]?gr\u00f6\u00dfe|timeouts?|cache[-\\s]?gr\u00f6\u00dfe|connections?)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win_relaxed H:2.5 T:1.0"
      },
      "timestamp": 1757161544.1499765
    },
    {
      "query": "Erkl\u00e4re die Funktionsweise von systemd Services Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499777
    },
    {
      "query": "Wie kann ich alle laufenden Prozesse anzeigen? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161544.1499789
    }
  ]
}