{
  "cycle": 547,
  "accuracy": 56.666666666666664,
  "cost_score": -1.6666666666666607,
  "heavy_recall": 23.076923076923077,
  "correct_routes": 17,
  "total_queries": 30,
  "cycle_time": 0.0038191130151972175,
  "routing_distribution": {
    "fast": 12,
    "code": 15,
    "heavy": 3
  },
  "category_accuracy": {
    "hard_negative": 20.0,
    "code_tasks": 100.0,
    "intermediate": 100.0,
    "mathematical": 60.0,
    "basic_commands": 50.0
  },
  "results": [
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6439345
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6439369
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6439378
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6439383
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6439388
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets Danke im Voraus!",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6439395
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6439404
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets",
      "category": "hard_negative",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6439412
    },
    {
      "query": "L\u00f6se die Optimierungsaufgabe f\u00fcr Memory-Allocation?",
      "category": "hard_negative",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.6,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cat; Complexity indicators: l\u00f6se; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\boptimierungsaufgabe\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 0.6
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.643944
    },
    {
      "query": "L\u00f6se die Optimierungsaufgabe f\u00fcr Memory-Allocation",
      "category": "hard_negative",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.6,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cat; Complexity indicators: l\u00f6se; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\boptimierungsaufgabe\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 0.6
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6439455
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440084
    },
    {
      "query": "Kannst du mir helfen: analysiere die performance-probleme bei hoher cpu-last",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, cp, rm; Code keywords: for; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440103
    },
    {
      "query": "Kannst du mir helfen: analysiere die ursachen f\u00fcr memory-leaks in anwendungen",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.28181818181818186,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.28181818181818186
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440125
    },
    {
      "query": "Berechne Fibonacci-Zahlen zur Bestimmung von Retry-Intervallen",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.9333333333333333,
      "reasoning": "Heavy model selected: heavy_high_complexity_verb (Code keywords: try; Complexity indicators: berechne, rechne)",
      "debug_info": {
        "route_reason": "heavy_high_complexity_verb"
      },
      "timestamp": 1757161634.644014
    },
    {
      "query": "L\u00f6se die Optimierungsaufgabe f\u00fcr Memory-Allocation Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.44999999999999996,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cat; Complexity indicators: l\u00f6se; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\boptimierungsaufgabe\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 0.44999999999999996
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440153
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.43333333333333335,
      "reasoning": "Heavy model selected: heavy_win_relaxed H:2.5 T:1.0 (Linux keywords: find, cp; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\boptimale?\\s+(anzahl|gr\u00f6\u00dfe|batch[-\\s]?gr\u00f6\u00dfe|timeouts?|cache[-\\s]?gr\u00f6\u00dfe|connections?)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.43333333333333335
        },
        "route_reason": "heavy_win_relaxed H:2.5 T:1.0"
      },
      "timestamp": 1757161634.644017
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440187
    },
    {
      "query": "Bestimme die mathematisch optimale Puffergr\u00f6\u00dfe f\u00fcr I/O-Operationen?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win_relaxed H:3.5 T:1.0 (Scores - Heavy: 3.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\b(puffer(?:gr\u00f6|gro)ss?e|block(?:gr\u00f6|gro)ss?e)\\b.{0,40}\\b(operation\\w*|i/?o)\\b"
        ],
        "tech_hits": [
          "\\b(i/?o|io)[\\s/\\-\u2013\u2014]*operation\\w*"
        ],
        "scores": {
          "heavy": 3.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win_relaxed H:3.5 T:1.0"
      },
      "timestamp": 1757161634.64402
    },
    {
      "query": "Was macht der df Befehl?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: befehl, df; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.644022
    },
    {
      "query": "Wie kann ich die Festplattenbelegung pr\u00fcfen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6440241
    },
    {
      "query": "Kannst du mir helfen: wie funktioniert die speicherverwaltung in linux?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440253
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757161634.6440265
    },
    {
      "query": "Schreibe ein Bash-Skript f\u00fcr System-Updates?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440277
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440284
    },
    {
      "query": "Welcher Befehl zeigt die Festplattenbelegung an bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.2857142857142857,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757161634.6440296
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440308
    },
    {
      "query": "Kannst du mir helfen: was ist der unterschied zwischen ls und ll?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.26666666666666666,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.26666666666666666
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440318
    },
    {
      "query": "Kannst du mir helfen: welcher befehl zeigt den verf\u00fcgbaren speicher?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl, du)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757161634.644034
    },
    {
      "query": "Erstelle ein Bash-Tool f\u00fcr User-Management Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash, gem; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.6440349
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757161634.644036
    }
  ]
}