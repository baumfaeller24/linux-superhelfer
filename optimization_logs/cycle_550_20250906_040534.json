{
  "cycle": 550,
  "accuracy": 68.0,
  "correct_routes": 68,
  "total_queries": 100,
  "cycle_time": 0.005482673645019531,
  "routing_distribution": {
    "fast": 18,
    "code": 70,
    "heavy": 12
  },
  "category_accuracy": {
    "basic_commands": 43.47826086956522,
    "intermediate": 86.20689655172413,
    "mathematical": 44.44444444444444,
    "code_tasks": 100.0
  },
  "results": [
    {
      "query": "Kannst du mir helfen: wie kann ich alle laufenden prozesse anzeigen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.36363636363636365,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.36363636363636365
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568129
    },
    {
      "query": "Was sind die Vor- und Nachteile von Docker vs. LXC bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.18181818181818182,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: docker; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.18181818181818182
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568132
    },
    {
      "query": "Wie funktioniert die Speicherverwaltung in Linux bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681336
    },
    {
      "query": "Berechne Fibonacci-Zahlen zur Bestimmung von Retry-Intervallen Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.8222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: try; Complexity indicators: berechne, rechne; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 0.8222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568136
    },
    {
      "query": "Schreibe ein Bash-Skript f\u00fcr System-Updates Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.25,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.25
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681396
    },
    {
      "query": "Kannst du mir helfen: analysiere die ursachen f\u00fcr memory-leaks in anwendungen",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.28181818181818186,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.28181818181818186
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681412
    },
    {
      "query": "Welcher Befehl zeigt die Systemzeit an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757124334.5681427
    },
    {
      "query": "Kannst du mir helfen: erkl\u00e4re die unterschiede zwischen verschiedenen schedulern",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681448
    },
    {
      "query": "Erstelle ein Bash-Tool f\u00fcr User-Management Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash, gem; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681474
    },
    {
      "query": "Wie optimiere ich die Netzwerk-Performance unter Linux? Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681493
    },
    {
      "query": "Bestimme die mathematisch optimale Cache-Gr\u00f6\u00dfe f\u00fcr Datenbank-Queries",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:0.0 (Scores - Heavy: 2.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 0.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win H:2.5 T:0.0"
      },
      "timestamp": 1757124334.5681524
    },
    {
      "query": "Was macht der df Befehl?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: befehl, df; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568157
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: find, cp; Scores - Heavy: 1.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681608
    },
    {
      "query": "Programmiere einen Service-Monitor in Python Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service; Code keywords: programmiere, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681632
    },
    {
      "query": "L\u00f6se das Gleichungssystem: x+y=10, x-y=2",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 1.0,
      "reasoning": "Heavy model selected: heavy_win H:2.0 T:1.0 (Linux keywords: ss; Complexity indicators: l\u00f6se; Scores - Heavy: 2.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bgleichungssystem\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.0,
          "tech": 1.0,
          "complexity": 1.0
        },
        "route_reason": "heavy_win H:2.0 T:1.0"
      },
      "timestamp": 1757124334.568165
    },
    {
      "query": "Kannst du mir helfen: was ist der unterschied zwischen ls und ll?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.26666666666666666,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.26666666666666666
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681672
    },
    {
      "query": "Analysiere die Ursachen f\u00fcr Memory-Leaks in Anwendungen?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681689
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681708
    },
    {
      "query": "Welches Kommando listet alle Dateien auf? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: kommando; Code keywords: list; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681725
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.43333333333333335,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: find, cp; Scores - Heavy: 1.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 1.0,
          "complexity": 0.43333333333333335
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681744
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: find, cp; Scores - Heavy: 1.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681763
    },
    {
      "query": "L\u00f6se das Gleichungssystem: x+y=10, x-y=2",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 1.0,
      "reasoning": "Heavy model selected: heavy_win H:2.0 T:1.0 (Linux keywords: ss; Complexity indicators: l\u00f6se; Scores - Heavy: 2.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bgleichungssystem\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.0,
          "tech": 1.0,
          "complexity": 1.0
        },
        "route_reason": "heavy_win H:2.0 T:1.0"
      },
      "timestamp": 1757124334.5681782
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681803
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.5681825
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: find, cp; Scores - Heavy: 1.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681844
    },
    {
      "query": "Schreibe ein Bash-Skript f\u00fcr System-Updates",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681863
    },
    {
      "query": "Erkl\u00e4re die Funktionsweise von systemd Services",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681884
    },
    {
      "query": "Kannst du mir helfen: bestimme die mathematisch beste partitionierung f\u00fcr gro\u00dfe datasets",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.16666666666666666,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.16666666666666666
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681906
    },
    {
      "query": "Was sind die Vor- und Nachteile von Docker vs. LXC? Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.15384615384615385,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: docker; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.15384615384615385
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568192
    },
    {
      "query": "Wie kann ich die Festplattenbelegung pr\u00fcfen bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.568195
    },
    {
      "query": "Erstelle ein Bash-Tool f\u00fcr User-Management?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash, gem; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5681963
    },
    {
      "query": "Kannst du mir helfen: welcher befehl zeigt die systemzeit an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl, du)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757124334.5681975
    },
    {
      "query": "Erstelle ein Python-Tool f\u00fcr Netzwerk-Monitoring Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.25,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.25
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568199
    },
    {
      "query": "Kannst du mir helfen: wie kann ich die netzwerkverbindungen anzeigen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682003
    },
    {
      "query": "Programmiere einen Service-Monitor in Python",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service; Code keywords: programmiere, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682018
    },
    {
      "query": "Berechne Fibonacci-Zahlen zur Bestimmung von Retry-Intervallen",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.9333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: try; Complexity indicators: berechne, rechne; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 0.9333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568203
    },
    {
      "query": "Programmiere einen Cron-Job f\u00fcr automatische Wartung",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cron; Code keywords: programmiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682046
    },
    {
      "query": "Was sind Best Practices f\u00fcr Linux-Security-Hardening?",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.5682058
    },
    {
      "query": "Wie funktioniert die Speicherverwaltung in Linux bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682073
    },
    {
      "query": "Programmiere einen Service-Monitor in Python?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service; Code keywords: programmiere, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682085
    },
    {
      "query": "Erkl\u00e4re die Funktionsweise von systemd Services?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682094
    },
    {
      "query": "Kannst du mir helfen: schreibe ein python-skript f\u00fcr performance-monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, rm; Code keywords: python, for; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682116
    },
    {
      "query": "Kannst du mir helfen: welcher befehl zeigt die festplattenbelegung an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl, du)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757124334.5682127
    },
    {
      "query": "Kannst du mir helfen: berechne fibonacci-zahlen zur bestimmung von retry-intervallen",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 1.0,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: try; Complexity indicators: berechne, rechne; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 1.0
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568214
    },
    {
      "query": "Wie optimiere ich die Netzwerk-Performance unter Linux?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682151
    },
    {
      "query": "Welcher Befehl zeigt die Systemzeit an??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757124334.5682163
    },
    {
      "query": "Kannst du mir helfen: analysiere die performance-probleme bei hoher cpu-last",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, cp, rm; Code keywords: for; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682175
    },
    {
      "query": "Erkl\u00e4re die Unterschiede zwischen verschiedenen Schedulern Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568219
    },
    {
      "query": "Schreibe ein Bash-Skript f\u00fcr System-Updates?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682204
    },
    {
      "query": "Analysiere die Performance-Probleme bei hoher CPU-Last",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp, rm; Code keywords: for; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682218
    },
    {
      "query": "Kannst du mir helfen: entwickle ein shell-skript f\u00fcr log-rotation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, du, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682228
    },
    {
      "query": "Kannst du mir helfen: finde die optimale anzahl von worker-threads f\u00fcr cpu-intensive tasks",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: find, du, cp; Scores - Heavy: 1.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568224
    },
    {
      "query": "Welcher Befehl zeigt die Festplattenbelegung an? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757124334.568225
    },
    {
      "query": "Kannst du mir helfen: erkl\u00e4re die funktionsweise von systemd services",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, du, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682266
    },
    {
      "query": "Analysiere die Performance-Probleme bei hoher CPU-Last",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp, rm; Code keywords: for; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682273
    },
    {
      "query": "Kannst du mir helfen: welcher befehl zeigt den verf\u00fcgbaren speicher?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl, du)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757124334.5682294
    },
    {
      "query": "Kannst du mir helfen: erkl\u00e4re mir die unterschiede zwischen verschiedenen dateisystemen",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.18181818181818182,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.18181818181818182
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682309
    },
    {
      "query": "Schreibe ein Python-Skript f\u00fcr Performance-Monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: python, for; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682323
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.5682337
    },
    {
      "query": "Welcher Befehl zeigt die Festplattenbelegung an? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757124334.5682347
    },
    {
      "query": "Kannst du mir helfen: wie funktioniert die speicherverwaltung in linux?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568236
    },
    {
      "query": "Erkl\u00e4re die Unterschiede zwischen verschiedenen Schedulern Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682373
    },
    {
      "query": "Bestimme die mathematisch optimale Cache-Gr\u00f6\u00dfe f\u00fcr Datenbank-Queries Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:0.0 (Scores - Heavy: 2.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 0.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win H:2.5 T:0.0"
      },
      "timestamp": 1757124334.5682387
    },
    {
      "query": "Kannst du mir helfen: schreibe ein python-skript f\u00fcr performance-monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, rm; Code keywords: python, for; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682402
    },
    {
      "query": "Finde die mathematisch optimale Batch-Gr\u00f6\u00dfe f\u00fcr Datenverarbeitung?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.7857142857142857,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:1.0 (Linux keywords: find; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.7857142857142857
        },
        "route_reason": "heavy_win H:2.5 T:1.0"
      },
      "timestamp": 1757124334.5682418
    },
    {
      "query": "Kannst du mir helfen: bestimme die mathematisch optimale puffergr\u00f6\u00dfe f\u00fcr i/o-operationen",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.6818181818181819,
      "reasoning": "Heavy model selected: heavy_win H:3.5 T:2.0 (Linux keywords: du; Scores - Heavy: 3.5, Tech: 2.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\b(puffer(?:gr\u00f6|gro)ss?e|block(?:gr\u00f6|gro)ss?e)\\b.{0,40}\\b(operation\\w*|i/?o)\\b"
        ],
        "tech_hits": [
          "\\b(i/?o|io)[\\s/\\-\u2013\u2014]*operation\\w*"
        ],
        "scores": {
          "heavy": 3.5,
          "tech": 2.0,
          "complexity": 0.6818181818181819
        },
        "route_reason": "heavy_win H:3.5 T:2.0"
      },
      "timestamp": 1757124334.5682435
    },
    {
      "query": "Bestimme die mathematisch optimale Cache-Gr\u00f6\u00dfe f\u00fcr Datenbank-Queries Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:0.0 (Scores - Heavy: 2.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 0.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win H:2.5 T:0.0"
      },
      "timestamp": 1757124334.568245
    },
    {
      "query": "Berechne die optimale Timeout-Werte f\u00fcr HTTP-Requests",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.30000000000000004,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: berechne, rechne; Scores - Heavy: 1.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 0.0,
          "complexity": 0.30000000000000004
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.5682464
    },
    {
      "query": "L\u00f6se das Gleichungssystem: x+y=10, x-y=2",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 1.0,
      "reasoning": "Heavy model selected: heavy_win H:2.0 T:1.0 (Linux keywords: ss; Complexity indicators: l\u00f6se; Scores - Heavy: 2.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bgleichungssystem\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.0,
          "tech": 1.0,
          "complexity": 1.0
        },
        "route_reason": "heavy_win H:2.0 T:1.0"
      },
      "timestamp": 1757124334.5682473
    },
    {
      "query": "Kannst du mir helfen: wie kann ich die festplattenbelegung pr\u00fcfen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682487
    },
    {
      "query": "Was macht der df Befehl bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: befehl, df; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682502
    },
    {
      "query": "Berechne Fibonacci-Zahlen zur Bestimmung von Retry-Intervallen?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.9333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: try; Complexity indicators: berechne, rechne; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 0.9333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682514
    },
    {
      "query": "Kannst du mir helfen: erkl\u00e4re die funktionsweise von systemd services",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, du, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682526
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682538
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682547
    },
    {
      "query": "Erkl\u00e4re die Unterschiede zwischen verschiedenen Schedulern",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682557
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: find, cp; Scores - Heavy: 1.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568257
    },
    {
      "query": "Welcher Befehl zeigt den verf\u00fcgbaren Speicher? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757124334.5682585
    },
    {
      "query": "Kannst du mir helfen: entwickle ein shell-skript f\u00fcr datenbank-backup",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, du; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.56826
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.5682611
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568262
    },
    {
      "query": "Was macht der df Befehl bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: befehl, df; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682635
    },
    {
      "query": "Wie optimiere ich die Netzwerk-Performance unter Linux bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682647
    },
    {
      "query": "Wie optimiere ich die Netzwerk-Performance unter Linux??",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568266
    },
    {
      "query": "Kannst du mir helfen: wie funktioniert die speicherverwaltung in linux?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.568267
    },
    {
      "query": "Erstelle eine Python-Funktion f\u00fcr Datei-Synchronisation?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682685
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682704
    },
    {
      "query": "Programmiere einen Cron-Job f\u00fcr automatische Wartung",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cron; Code keywords: programmiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682719
    },
    {
      "query": "Finde die mathematisch optimale Batch-Gr\u00f6\u00dfe f\u00fcr Datenverarbeitung",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.7857142857142857,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:1.0 (Linux keywords: find; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.7857142857142857
        },
        "route_reason": "heavy_win H:2.5 T:1.0"
      },
      "timestamp": 1757124334.568273
    },
    {
      "query": "L\u00f6se das Gleichungssystem: x+y=10, x-y=2?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 1.0,
      "reasoning": "Heavy model selected: heavy_win H:2.0 T:1.0 (Linux keywords: ss; Complexity indicators: l\u00f6se; Scores - Heavy: 2.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bgleichungssystem\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.0,
          "tech": 1.0,
          "complexity": 1.0
        },
        "route_reason": "heavy_win H:2.0 T:1.0"
      },
      "timestamp": 1757124334.5682747
    },
    {
      "query": "Wie kann ich die Festplattenbelegung pr\u00fcfen? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.568276
    },
    {
      "query": "Berechne die optimale Anzahl von Connections im Connection Pool Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: berechne, rechne; Scores - Heavy: 1.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 0.0,
          "complexity": 0.2
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.5682774
    },
    {
      "query": "Erstelle ein Bash-Tool f\u00fcr User-Management",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash, gem; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682786
    },
    {
      "query": "Was sind die Vor- und Nachteile von Docker vs. LXC bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.18181818181818182,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: docker; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.18181818181818182
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682802
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.5682817
    },
    {
      "query": "Wie kann ich die Netzwerkverbindungen anzeigen??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682826
    },
    {
      "query": "Finde die mathematisch optimale Batch-Gr\u00f6\u00dfe f\u00fcr Datenverarbeitung?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.7857142857142857,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:1.0 (Linux keywords: find; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.7857142857142857
        },
        "route_reason": "heavy_win H:2.5 T:1.0"
      },
      "timestamp": 1757124334.5682843
    },
    {
      "query": "Kannst du mir helfen: bestimme die mathematisch optimale cache-gr\u00f6\u00dfe f\u00fcr datenbank-queries",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.6818181818181819,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:1.0 (Linux keywords: du; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.6818181818181819
        },
        "route_reason": "heavy_win H:2.5 T:1.0"
      },
      "timestamp": 1757124334.5682857
    },
    {
      "query": "Kannst du mir helfen: welches kommando listet alle dateien auf?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: kommando, du; Code keywords: list; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757124334.5682867
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757124334.568288
    }
  ]
}