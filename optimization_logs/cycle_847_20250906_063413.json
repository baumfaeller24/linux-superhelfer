{
  "cycle": 847,
  "accuracy": 62.0,
  "correct_routes": 62,
  "total_queries": 100,
  "cycle_time": 0.005547523498535156,
  "routing_distribution": {
    "fast": 29,
    "code": 64,
    "heavy": 7
  },
  "category_accuracy": {
    "code_tasks": 100.0,
    "mathematical": 36.84210526315789,
    "basic_commands": 44.44444444444444,
    "intermediate": 63.33333333333333
  },
  "results": [
    {
      "query": "Erstelle ein Python-Tool f\u00fcr Netzwerk-Monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100422
    },
    {
      "query": "Bestimme die mathematisch optimale Cache-Gr\u00f6\u00dfe f\u00fcr Datenbank-Queries Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:0.0 (Scores - Heavy: 2.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 0.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win H:2.5 T:0.0"
      },
      "timestamp": 1757133253.0100462
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100493
    },
    {
      "query": "Kannst du mir helfen: wie kann ich alle laufenden prozesse anzeigen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.36363636363636365,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.36363636363636365
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100513
    },
    {
      "query": "Kannst du mir helfen: welcher befehl zeigt die systemzeit an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl, du)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.0100524
    },
    {
      "query": "Finde die mathematisch optimale Batch-Gr\u00f6\u00dfe f\u00fcr Datenverarbeitung",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.7857142857142857,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:1.0 (Linux keywords: find; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.7857142857142857
        },
        "route_reason": "heavy_win H:2.5 T:1.0"
      },
      "timestamp": 1757133253.0100539
    },
    {
      "query": "Welcher Befehl zeigt den verf\u00fcgbaren Speicher bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.2857142857142857,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.010056
    },
    {
      "query": "Wie kann ich alle laufenden Prozesse anzeigen? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100572
    },
    {
      "query": "Wie kann ich alle laufenden Prozesse anzeigen? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100582
    },
    {
      "query": "Kannst du mir helfen: wie kann ich alle laufenden prozesse anzeigen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.36363636363636365,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.36363636363636365
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100596
    },
    {
      "query": "Was sind Best Practices f\u00fcr Linux-Security-Hardening??",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0100613
    },
    {
      "query": "Erstelle ein Python-Tool f\u00fcr Netzwerk-Monitoring Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.25,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.25
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100622
    },
    {
      "query": "Erstelle eine Python-Funktion f\u00fcr Datei-Synchronisation Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100636
    },
    {
      "query": "Wie optimiere ich die Netzwerk-Performance unter Linux?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100648
    },
    {
      "query": "Kannst du mir helfen: welcher befehl zeigt die festplattenbelegung an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl, du)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.010066
    },
    {
      "query": "Wie kann ich die Netzwerkverbindungen anzeigen bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100672
    },
    {
      "query": "Finde die mathematisch optimale Batch-Gr\u00f6\u00dfe f\u00fcr Datenverarbeitung?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.7857142857142857,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:1.0 (Linux keywords: find; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.7857142857142857
        },
        "route_reason": "heavy_win H:2.5 T:1.0"
      },
      "timestamp": 1757133253.010069
    },
    {
      "query": "Kannst du mir helfen: bestimme die mathematisch optimale cache-gr\u00f6\u00dfe f\u00fcr datenbank-queries",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.6818181818181819,
      "reasoning": "Heavy model selected: heavy_win H:2.5 T:1.0 (Linux keywords: du; Scores - Heavy: 2.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 2.5,
          "tech": 1.0,
          "complexity": 0.6818181818181819
        },
        "route_reason": "heavy_win H:2.5 T:1.0"
      },
      "timestamp": 1757133253.0100703
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100713
    },
    {
      "query": "Kannst du mir helfen: wie optimiere ich die netzwerk-performance unter linux?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100725
    },
    {
      "query": "Kannst du mir helfen: bestimme die mathematisch optimale puffergr\u00f6\u00dfe f\u00fcr i/o-operationen",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.6818181818181819,
      "reasoning": "Heavy model selected: heavy_win H:3.5 T:2.0 (Linux keywords: du; Scores - Heavy: 3.5, Tech: 2.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\b(puffer(?:gr\u00f6|gro)ss?e|block(?:gr\u00f6|gro)ss?e)\\b.{0,40}\\b(operation\\w*|i/?o)\\b"
        ],
        "tech_hits": [
          "\\b(i/?o|io)[\\s/\\-\u2013\u2014]*operation\\w*"
        ],
        "scores": {
          "heavy": 3.5,
          "tech": 2.0,
          "complexity": 0.6818181818181819
        },
        "route_reason": "heavy_win H:3.5 T:2.0"
      },
      "timestamp": 1757133253.010074
    },
    {
      "query": "Berechne Fibonacci-Zahlen zur Bestimmung von Retry-Intervallen",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.9333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: try; Complexity indicators: berechne, rechne; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 0.9333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100749
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100756
    },
    {
      "query": "Kannst du mir helfen: schreibe ein bash-skript zum automatischen backup",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash, du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100768
    },
    {
      "query": "Schreibe ein Bash-Skript f\u00fcr System-Updates Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.25,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.25
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010078
    },
    {
      "query": "L\u00f6se die Optimierungsaufgabe f\u00fcr Memory-Allocation?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.6,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cat; Complexity indicators: l\u00f6se; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.6
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100794
    },
    {
      "query": "Wie optimiere ich die Netzwerk-Performance unter Linux bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010081
    },
    {
      "query": "Welcher Befehl zeigt die Festplattenbelegung an bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.2857142857142857,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.010082
    },
    {
      "query": "Analysiere die Ursachen f\u00fcr Memory-Leaks in Anwendungen",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010083
    },
    {
      "query": "Wie kann ich alle laufenden Prozesse anzeigen??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100844
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.010086
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100877
    },
    {
      "query": "Welcher Befehl zeigt den verf\u00fcgbaren Speicher??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.0100892
    },
    {
      "query": "Analysiere die Ursachen f\u00fcr Memory-Leaks in Anwendungen Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.30000000000000004,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.30000000000000004
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100913
    },
    {
      "query": "Erstelle ein Python-Tool f\u00fcr Netzwerk-Monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100925
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100942
    },
    {
      "query": "Erkl\u00e4re die Unterschiede zwischen verschiedenen Schedulern?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010096
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100975
    },
    {
      "query": "Schreibe ein Bash-Skript f\u00fcr System-Updates",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0100994
    },
    {
      "query": "Schreibe ein Python-Skript f\u00fcr Performance-Monitoring?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: rm; Code keywords: python, for; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010101
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101025
    },
    {
      "query": "Welcher Befehl zeigt die Systemzeit an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.0101044
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.010106
    },
    {
      "query": "Berechne die optimale Timeout-Werte f\u00fcr HTTP-Requests?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.30000000000000004,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: berechne, rechne; Scores - Heavy: 1.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 0.0,
          "complexity": 0.30000000000000004
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101082
    },
    {
      "query": "Kannst du mir helfen: vergleiche verschiedene load-balancing-strategien",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: vergleiche; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101092
    },
    {
      "query": "Erkl\u00e4re die Funktionsweise von systemd Services",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101104
    },
    {
      "query": "Wie funktioniert die Speicherverwaltung in Linux? Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2222222222222222
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101116
    },
    {
      "query": "Programmiere einen Cron-Job f\u00fcr automatische Wartung",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cron; Code keywords: programmiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010113
    },
    {
      "query": "Welcher Befehl zeigt die Festplattenbelegung an bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.2857142857142857,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.0101137
    },
    {
      "query": "Erkl\u00e4re die Unterschiede zwischen verschiedenen Schedulern?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101151
    },
    {
      "query": "Erkl\u00e4re die Unterschiede zwischen verschiedenen Schedulern",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101163
    },
    {
      "query": "Berechne die optimale Timeout-Werte f\u00fcr HTTP-Requests",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.30000000000000004,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: berechne, rechne; Scores - Heavy: 1.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 0.0,
          "complexity": 0.30000000000000004
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101175
    },
    {
      "query": "Kannst du mir helfen: wie optimiere ich die netzwerk-performance unter linux?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, rm; Code keywords: for; Complexity indicators: optimiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010119
    },
    {
      "query": "Kannst du mir helfen: wie zeige ich die cpu-auslastung an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101204
    },
    {
      "query": "Bestimme die mathematisch optimale Puffergr\u00f6\u00dfe f\u00fcr I/O-Operationen",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win H:3.5 T:1.0 (Scores - Heavy: 3.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\b(puffer(?:gr\u00f6|gro)ss?e|block(?:gr\u00f6|gro)ss?e)\\b.{0,40}\\b(operation\\w*|i/?o)\\b"
        ],
        "tech_hits": [
          "\\b(i/?o|io)[\\s/\\-\u2013\u2014]*operation\\w*"
        ],
        "scores": {
          "heavy": 3.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win H:3.5 T:1.0"
      },
      "timestamp": 1757133253.0101225
    },
    {
      "query": "Vergleiche verschiedene Load-Balancing-Strategien Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.1,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: vergleiche; Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.1
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101237
    },
    {
      "query": "L\u00f6se die Optimierungsaufgabe f\u00fcr Memory-Allocation Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.44999999999999996,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cat; Complexity indicators: l\u00f6se; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.44999999999999996
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101256
    },
    {
      "query": "Erkl\u00e4re die Unterschiede zwischen verschiedenen Schedulern",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010127
    },
    {
      "query": "Kannst du mir helfen: erstelle eine python-funktion f\u00fcr datei-synchronisation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: funktion, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010129
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101302
    },
    {
      "query": "Schreibe ein Bash-Skript zum automatischen Backup?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101314
    },
    {
      "query": "Kannst du mir helfen: berechne fibonacci-zahlen zur bestimmung von retry-intervallen",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 1.0,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: try; Complexity indicators: berechne, rechne; Scores - Heavy: 1.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 1.0,
          "tech": 1.0,
          "complexity": 1.0
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010133
    },
    {
      "query": "Vergleiche verschiedene Load-Balancing-Strategien",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.1,
      "reasoning": "Fast model selected: fast_short (Complexity indicators: vergleiche)",
      "debug_info": {
        "route_reason": "fast_short"
      },
      "timestamp": 1757133253.0101345
    },
    {
      "query": "Wie funktioniert die Speicherverwaltung in Linux bitte?",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101361
    },
    {
      "query": "Vergleiche verschiedene Load-Balancing-Strategien Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.1,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: vergleiche; Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.1
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101373
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Datenbank-Backup?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101395
    },
    {
      "query": "Welcher Befehl zeigt die Festplattenbelegung an? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.2222222222222222,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.0101407
    },
    {
      "query": "Finde die optimale Anzahl von Worker-Threads f\u00fcr CPU-intensive Tasks Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.43333333333333335,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: find, cp; Scores - Heavy: 1.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 1.0,
          "complexity": 0.43333333333333335
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010143
    },
    {
      "query": "Wie zeige ich die CPU-Auslastung an??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101445
    },
    {
      "query": "Wie funktioniert die Speicherverwaltung in Linux??",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3333333333333333,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3333333333333333
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101466
    },
    {
      "query": "Wie kann ich alle laufenden Prozesse anzeigen bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.25,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.25
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101478
    },
    {
      "query": "Was macht der df Befehl? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: befehl, df; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.01015
    },
    {
      "query": "Kannst du mir helfen: erstelle ein python-tool f\u00fcr netzwerk-monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Code keywords: python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101514
    },
    {
      "query": "Kannst du mir helfen: bestimme die mathematisch beste partitionierung f\u00fcr gro\u00dfe datasets",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "code",
      "correct": false,
      "complexity": 0.16666666666666666,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.16666666666666666
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101535
    },
    {
      "query": "Wie kann ich die Festplattenbelegung pr\u00fcfen? Danke im Voraus!",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101552
    },
    {
      "query": "Kannst du mir helfen: vergleiche verschiedene load-balancing-strategien",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.3857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: vergleiche; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.3857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101564
    },
    {
      "query": "Berechne die optimale Anzahl von Connections im Connection Pool",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.2,
      "reasoning": "Fast model selected: fast_default (Complexity indicators: berechne, rechne; Scores - Heavy: 1.5, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b"
        ],
        "tech_hits": [],
        "scores": {
          "heavy": 1.5,
          "tech": 0.0,
          "complexity": 0.2
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101573
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen Danke im Voraus!",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101593
    },
    {
      "query": "Bestimme die mathematisch optimale Puffergr\u00f6\u00dfe f\u00fcr I/O-Operationen Danke im Voraus!",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "heavy",
      "correct": true,
      "complexity": 0.5,
      "reasoning": "Heavy model selected: heavy_win H:3.5 T:1.0 (Scores - Heavy: 3.5, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [
          "\\bmathematisch\\w*\\b.{0,40}\\boptimal\\w*\\b",
          "\\b(bestimme|berechne|minimiere|maximiere|optimiere|finde|l\u00f6se)\\b[^\\.]{0,80}\\b(optimal\\w*|minimum|maxim\\w*|argmin|argmax)\\b",
          "\\b(puffer(?:gr\u00f6|gro)ss?e|block(?:gr\u00f6|gro)ss?e)\\b.{0,40}\\b(operation\\w*|i/?o)\\b"
        ],
        "tech_hits": [
          "\\b(i/?o|io)[\\s/\\-\u2013\u2014]*operation\\w*"
        ],
        "scores": {
          "heavy": 3.5,
          "tech": 1.0,
          "complexity": 0.5
        },
        "route_reason": "heavy_win H:3.5 T:1.0"
      },
      "timestamp": 1757133253.010161
    },
    {
      "query": "Kannst du mir helfen: wie zeige ich die cpu-auslastung an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du, cp; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101624
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101638
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101657
    },
    {
      "query": "Erstelle eine Python-Funktion f\u00fcr Datei-Synchronisation Danke im Voraus!",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: funktion, python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101674
    },
    {
      "query": "Kannst du mir helfen: erstelle ein bash-tool f\u00fcr user-management",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: bash, du, gem; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101688
    },
    {
      "query": "Was sind Best Practices f\u00fcr Linux-Security-Hardening?",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101705
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101717
    },
    {
      "query": "Vergleiche verschiedene Load-Balancing-Strategien",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.1,
      "reasoning": "Fast model selected: fast_short (Complexity indicators: vergleiche)",
      "debug_info": {
        "route_reason": "fast_short"
      },
      "timestamp": 1757133253.0101726
    },
    {
      "query": "Was sind die Vor- und Nachteile von Docker vs. LXC??",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.2,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: docker; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101743
    },
    {
      "query": "Erkl\u00e4re mir die Unterschiede zwischen verschiedenen Dateisystemen",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101752
    },
    {
      "query": "Was sind Best Practices f\u00fcr Linux-Security-Hardening?",
      "category": "intermediate",
      "expected": "code",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101764
    },
    {
      "query": "Erstelle ein Python-Tool f\u00fcr Netzwerk-Monitoring",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Code keywords: python; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010178
    },
    {
      "query": "Kannst du mir helfen: welcher befehl zeigt die festplattenbelegung an?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Fast model selected: fast_basic_command (Linux keywords: befehl, du)",
      "debug_info": {
        "route_reason": "fast_basic_command"
      },
      "timestamp": 1757133253.0101793
    },
    {
      "query": "Kannst du mir helfen: erkl\u00e4re die funktionsweise von systemd services",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: service, du, systemd; Code keywords: funktion; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.0101802
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101821
    },
    {
      "query": "Bestimme die mathematisch beste Partitionierung f\u00fcr gro\u00dfe Datasets?",
      "category": "mathematical",
      "expected": "heavy",
      "actual": "fast",
      "correct": false,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101833
    },
    {
      "query": "Entwickle ein Shell-Skript f\u00fcr Log-Rotation?",
      "category": "code_tasks",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.4,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: shell, log; Code keywords: entwickle; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.4
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010185
    },
    {
      "query": "Kannst du mir helfen: analysiere die ursachen f\u00fcr memory-leaks in anwendungen",
      "category": "intermediate",
      "expected": "code",
      "actual": "code",
      "correct": true,
      "complexity": 0.28181818181818186,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: du; Complexity indicators: analysiere; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.28181818181818186
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010186
    },
    {
      "query": "Wie kann ich die Festplattenbelegung pr\u00fcfen bitte?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.010187
    },
    {
      "query": "Wie kann ich alle laufenden Prozesse anzeigen??",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "code",
      "correct": false,
      "complexity": 0.2857142857142857,
      "reasoning": "Code model selected: code_tech T:1.0 (Linux keywords: ss; Scores - Heavy: 0.0, Tech: 1.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 1.0,
          "complexity": 0.2857142857142857
        },
        "route_reason": "code_tech T:1.0"
      },
      "timestamp": 1757133253.010188
    },
    {
      "query": "Wie kann ich die Festplattenbelegung pr\u00fcfen?",
      "category": "basic_commands",
      "expected": "fast",
      "actual": "fast",
      "correct": true,
      "complexity": 0.0,
      "reasoning": "Fast model selected: fast_default (Scores - Heavy: 0.0, Tech: 0.0)",
      "debug_info": {
        "heavy_hits": [],
        "tech_hits": [],
        "scores": {
          "heavy": 0.0,
          "tech": 0.0,
          "complexity": 0.0
        },
        "route_reason": "fast_default"
      },
      "timestamp": 1757133253.0101893
    }
  ]
}